var e;!function(e){e[e.Keyword=0]="Keyword",e[e.Identifier=1]="Identifier",e[e.Operator=2]="Operator",e[e.Delimiter=3]="Delimiter",e[e.Literal=4]="Literal",e[e.TemplateLiteral=5]="TemplateLiteral",e[e.Comment=6]="Comment",e[e.EndOfStatement=7]="EndOfStatement"}(e||(e={}));class t{constructor(){this.keywords=new Set(["const","let","var","if","else","function","return","for","while"]),this.operators=new Set(["=","+","-","*","/","%","===","!==","<",">","&&","||","!"]),this.delimiters=new Set([";","{","}","(",")","[","]"]),this.singleCharDelimiters=new Set([";","{","}","(",")","[","]"])}tokenize(t){const r=[];let n=0,i=null;const l=(e,t)=>{i={type:e,value:t},r.push(i)};for(;n<t.length;){let r=t[n];if(/\s/.test(r)){"\n"===r&&i&&i.type!==e.Delimiter&&l(e.Delimiter,";"),n++;continue}if("/"===r){const r=t[n+1];if("/"===r){let r="";for(n+=2;n<t.length&&"\n"!==t[n];)r+=t[n++];l(e.Comment,r);continue}if("*"===r){let r="";for(n+=2;n<t.length&&("*"!==t[n]||"/"!==t[n+1]);)r+=t[n++];n+=2,l(e.Comment,r);continue}}if(this.singleCharDelimiters.has(r)){l(e.Delimiter,r),n++;continue}let o="";for(;this.operators.has(o+t[n]);)o+=t[n++];if(o)l(e.Operator,o);else if(/[a-zA-Z_$]/.test(r)){let r="";for(;/[a-zA-Z0-9_$]/.test(t[n]);)r+=t[n++];l(this.keywords.has(r)?e.Keyword:e.Identifier,r)}else{if(!/[0-9]/.test(r))throw new Error(`Unexpected character: ${r}`);{let r="";for(;/[0-9.]/.test(t[n]);)r+=t[n++];l(e.Literal,r)}}}return i&&i.type!==e.Delimiter&&l(e.Delimiter,";"),l(e.EndOfStatement,"EOF"),r}}class r{build(t){const r={type:"Program",children:[]};let n=0;function i(){const r=t[n];if(r.type===e.Literal)return n++,{type:"Literal",value:r.value};if(r.type===e.Identifier)return n++,{type:"Identifier",value:r.value};if(r.type===e.Keyword&&"const"===r.value){n++;const e=i();n++;const t=i();return n++,{type:"VariableDeclaration",value:"const",children:[e,t]}}throw new Error(`Unexpected token: ${r.type===e.EndOfStatement?"EOF":r.value}`)}for(;n<t.length&&t[n].type!==e.EndOfStatement;)r.children?.push(i());return r}}class n{optimize(e){return function e(t){if("VariableDeclaration"===t.type&&t.children){const e=t.children[1];if("Literal"===e.type)return{type:"InlineConstant",value:`${t.children[0].value}=${e.value}`}}return t.children&&(t.children=t.children.map(e)),t}(e)}}export{r as ASTBuilder,n as ASTOptimizer,e as TokenType,t as Tokenizer};
//# sourceMappingURL=index.js.map
