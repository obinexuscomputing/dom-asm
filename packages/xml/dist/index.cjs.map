{"version":3,"file":"index.cjs","sources":["../src/ast/DOMXMLAST.ts","../src/ast/DOMXMLASTOptimizer.ts","../src/generator/DOMXMLGenerator.ts","../src/parser/DOMXMLParser.ts","../src/tokenizer/XMLBaseTokenizer.ts","../src/tokenizer/DOMXMLTokenizer.ts","../src/validator/DOMXMLValidator.ts","../src/index.ts"],"sourcesContent":["export interface DOMXMLMetadata {\r\n  nodeCount: number;\r\n  elementCount: number;\r\n  textCount: number;\r\n  commentCount: number;\r\n}\r\n\r\nexport interface DOMXMLASTNode {\r\n  type: \"Element\" | \"Text\" | \"Comment\" | \"Doctype\";\r\n  name?: string;\r\n  value?: string;\r\n  attributes?: Record<string, string>;\r\n  children?: DOMXMLASTNode[];\r\n}\r\n\r\nexport class DOMXMLAST {\r\n  constructor(\r\n    public root: DOMXMLASTNode,\r\n    public metadata: DOMXMLMetadata\r\n  ) {}\r\n\r\n  computeMetadata(): DOMXMLMetadata {\r\n    let nodeCount = 0;\r\n    let elementCount = 0;\r\n    let textCount = 0;\r\n    let commentCount = 0;\r\n\r\n    const traverse = (node: DOMXMLASTNode) => {\r\n      nodeCount++;\r\n      switch (node.type) {\r\n        case \"Element\":\r\n          elementCount++;\r\n          break;\r\n        case \"Text\":\r\n          textCount++;\r\n          break;\r\n        case \"Comment\":\r\n          commentCount++;\r\n          break;\r\n      }\r\n      node.children?.forEach(traverse);\r\n    };\r\n\r\n    traverse(this.root);\r\n\r\n    return {\r\n      nodeCount,\r\n      elementCount,\r\n      textCount,\r\n      commentCount,\r\n    };\r\n  }\r\n  addChildNode(parent: DOMXMLASTNode, child: DOMXMLASTNode): void {\r\n    parent.children = parent.children || [];\r\n    parent.children.push(child);\r\n  }\r\n\r\n  removeChildNode(parent: DOMXMLASTNode, child: DOMXMLASTNode): void {\r\n    parent.children = parent.children?.filter((c) => c !== child) || [];\r\n  }\r\n}\r\n","import { DOMXMLASTNode, DOMXMLAST } from \"./DOMXMLAST\";\r\n\r\nexport class DOMXMLASTOptimizer {\r\n  /**\r\n   * Optimize the given AST by removing redundant nodes, merging text nodes, and recalculating metadata.\r\n   */\r\n  public optimize(ast: DOMXMLAST): DOMXMLAST {\r\n    const optimizedRoot = this.optimizeNode(ast.root);\r\n    const metadata = this.computeMetadata(optimizedRoot); // Use the optimized root\r\n    return new DOMXMLAST(optimizedRoot, metadata);\r\n  }\r\n  \r\n  public optimizeChildren(children: DOMXMLASTNode[]): DOMXMLASTNode[] {\r\n    // First pass: Remove empty text nodes and optimize children recursively\r\n    let optimized = children\r\n      .filter((node) => {\r\n        if (node.type === \"Text\") {\r\n          // Keep non-empty text nodes\r\n          return node.value?.trim() !== \"\";\r\n        }\r\n        if (node.type === \"Element\") {\r\n          // Always keep elements; further optimization happens recursively\r\n          return true;\r\n        }\r\n        return true; // Keep other node types (e.g., Comment, Doctype)\r\n      })\r\n      .map((node) =>\r\n        node.type === \"Element\" && node.children\r\n          ? { ...node, children: this.optimizeChildren(node.children) }\r\n          : node\r\n      );\r\n  \r\n    // Second pass: Merge adjacent text nodes\r\n    let i = 0;\r\n    while (i < optimized.length - 1) {\r\n      const current = optimized[i];\r\n      const next = optimized[i + 1];\r\n      if (current.type === \"Text\" && next.type === \"Text\") {\r\n        current.value = (current.value || \"\") + (next.value || \"\"); // Merge text values\r\n        optimized.splice(i + 1, 1); // Remove the merged node\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  \r\n    return optimized;\r\n  }\r\n  \r\n\r\n  private optimizeNode(node: DOMXMLASTNode): DOMXMLASTNode {\r\n    if (node.children) {\r\n      node.children = this.optimizeChildren(node.children);\r\n    }\r\n    return node;\r\n  }\r\n  \r\n  /**\r\n   * Compute metadata for the optimized AST.\r\n   */\r\n  public computeMetadata(root: DOMXMLASTNode): DOMXMLAST[\"metadata\"] {\r\n    let nodeCount = 0;\r\n    let elementCount = 0;\r\n    let textCount = 0;\r\n    let commentCount = 0;\r\n\r\n    const traverse = (node: DOMXMLASTNode) => {\r\n      nodeCount++;\r\n      switch (node.type) {\r\n        case \"Element\":\r\n          elementCount++;\r\n          break;\r\n        case \"Text\":\r\n          textCount++;\r\n          break;\r\n        case \"Comment\":\r\n          commentCount++;\r\n          break;\r\n      }\r\n      if (node.children) {\r\n        node.children.forEach(traverse);\r\n      }\r\n    };\r\n\r\n    traverse(root);\r\n\r\n    return { nodeCount, elementCount, textCount, commentCount };\r\n  }\r\n}\r\n","import { DOMXMLAST, DOMXMLASTNode } from \"../ast/DOMXMLAST\";\r\n\r\nexport interface GeneratorOptions {\r\n  indent?: string;\r\n  newLine?: string;\r\n  xmlDeclaration?: boolean;\r\n  prettyPrint?: boolean;\r\n}\r\n\r\nexport class DOMXMLGenerator {\r\n  private options: Required<GeneratorOptions>;\r\n\r\n  constructor(options: GeneratorOptions = {}) {\r\n    this.options = {\r\n      indent: options.indent ?? \"  \",\r\n      newLine: options.newLine ?? \"\\n\",\r\n      xmlDeclaration: options.xmlDeclaration ?? true,\r\n      prettyPrint: options.prettyPrint ?? true,\r\n    };\r\n  }\r\n\r\n  public generate(ast: DOMXMLAST): string {\r\n    let result = \"\";\r\n\r\n    if (this.options.xmlDeclaration) {\r\n      result += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + this.options.newLine;\r\n    }\r\n\r\n    result += this.generateNode(ast.root, 0);\r\n    return result;\r\n  }\r\n\r\n  private generateNode(node: DOMXMLASTNode, depth: number): string {\r\n    switch (node.type) {\r\n      case \"Element\":\r\n        return this.generateElement(node, depth);\r\n      case \"Text\":\r\n        return this.generateText(node, depth);\r\n      case \"Comment\":\r\n        return this.generateComment(node, depth);\r\n      case \"Doctype\":\r\n        return this.generateDoctype(node, depth);\r\n      default:\r\n        throw new Error(`Unknown node type: ${node.type}`);\r\n    }\r\n  }\r\n\r\n  private generateElement(node: DOMXMLASTNode, depth: number): string {\r\n    const indent = this.options.prettyPrint ? this.getIndent(depth) : \"\";\r\n    let result = indent + \"<\" + (node.name || \"\");\r\n\r\n    if (node.attributes) {\r\n      result += Object.entries(node.attributes)\r\n        .map(\r\n          ([key, value]) => ` ${key}=\"${this.escapeAttribute(String(value))}\"`,\r\n        )\r\n        .join(\"\");\r\n    }\r\n\r\n    if (!node.children?.length) {\r\n      return result + \"/>\" + this.options.newLine;\r\n    }\r\n\r\n    result += \">\";\r\n\r\n    if (node.children.length === 1 && node.children[0].type === \"Text\") {\r\n      result += this.escapeText(node.children[0].value || \"\");\r\n      result += \"</\" + node.name + \">\" + this.options.newLine;\r\n      return result;\r\n    }\r\n\r\n    result += this.options.newLine;\r\n\r\n    for (const child of node.children) {\r\n      result += this.generateNode(child, depth + 1);\r\n    }\r\n\r\n    result += indent + \"</\" + node.name + \">\" + this.options.newLine;\r\n    return result;\r\n  }\r\n\r\n  private generateText(node: DOMXMLASTNode, depth: number): string {\r\n    const indent = this.options.prettyPrint ? this.getIndent(depth) : \"\";\r\n    return indent + this.escapeText(node.value || \"\") + this.options.newLine;\r\n  }\r\n\r\n  private generateComment(node: DOMXMLASTNode, depth: number): string {\r\n    const indent = this.options.prettyPrint ? this.getIndent(depth) : \"\";\r\n    return indent + \"<!--\" + (node.value || \"\") + \"-->\" + this.options.newLine;\r\n  }\r\n\r\n  private generateDoctype(node: DOMXMLASTNode, depth: number): string {\r\n    const indent = this.options.prettyPrint ? this.getIndent(depth) : \"\";\r\n    return (\r\n      indent + \"<!DOCTYPE \" + (node.value || \"\") + \">\" + this.options.newLine\r\n    );\r\n  }\r\n\r\n  private getIndent(depth: number): string {\r\n    return this.options.indent.repeat(depth);\r\n  }\r\n\r\n  private escapeText(text: string): string {\r\n    return text\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\");\r\n  }\r\n\r\n  private escapeAttribute(text: string): string {\r\n    return text\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\")\r\n      .replace(/\"/g, \"&quot;\")\r\n      .replace(/'/g, \"&apos;\");\r\n  }\r\n}\r\n","import { DOMXMLAST, DOMXMLASTNode } from \"../ast/DOMXMLAST\";\r\nimport { DOMXMLToken } from \"../tokenizer/DOMXMLTokenizer\";\r\n\r\nexport class DOMXMLParser {\r\n  private tokens: DOMXMLToken[];\r\n  private position: number;\r\n\r\n  constructor(tokens?: DOMXMLToken[]) {\r\n    this.tokens = tokens || [];\r\n    this.position = 0;\r\n  }\r\n\r\n  /**\r\n   * Set new tokens for parsing.\r\n   * @param tokens - Array of DOMXMLToken objects.\r\n   */\r\n  public setTokens(tokens: DOMXMLToken[]): void {\r\n    this.tokens = tokens;\r\n    this.position = 0;\r\n  }\r\n\r\n  /**\r\n   * Parses the tokens into a DOMXMLAST.\r\n   * @returns The parsed DOMXMLAST.\r\n   */\r\n  public parse(): DOMXMLAST {\r\n    this.position = 0;\r\n  \r\n    const virtualRoot: DOMXMLASTNode = {\r\n      type: \"Element\",\r\n      name: \"#document\",\r\n      children: [],\r\n      attributes: {},\r\n    };\r\n  \r\n    const stack: DOMXMLASTNode[] = [virtualRoot];\r\n    let currentNode = virtualRoot;\r\n  \r\n    while (this.position < this.tokens.length) {\r\n      const token = this.tokens[this.position++];\r\n  \r\n      switch (token.type) {\r\n        case \"StartTag\": {\r\n          const elementNode: DOMXMLASTNode = {\r\n            type: \"Element\",\r\n            name: token.name!,\r\n            attributes: token.attributes || {},\r\n            children: [],\r\n          };\r\n          currentNode.children!.push(elementNode);\r\n          if (!token.selfClosing) {\r\n            stack.push(elementNode);\r\n            currentNode = elementNode;\r\n          }\r\n          break;\r\n        }\r\n  \r\n        case \"EndTag\": {\r\n          if (stack.length > 1) {\r\n            const openTag = stack.pop()!;\r\n            if (openTag.name !== token.name) {\r\n              throw new Error(\r\n                `Mismatched tags: expected closing tag for \"${openTag.name}\", but found \"${token.name}\".`\r\n              );\r\n            }\r\n            currentNode = stack[stack.length - 1];\r\n          } else {\r\n            throw new Error(`Unexpected closing tag: \"${token.name}\".`);\r\n          }\r\n          break;\r\n        }\r\n  \r\n        case \"Text\": {\r\n          const textValue = token.value?.trim();\r\n          if (textValue) {\r\n            currentNode.children!.push({\r\n              type: \"Text\",\r\n              value: textValue,\r\n            });\r\n          }\r\n          break;\r\n        }\r\n  \r\n        case \"Comment\": {\r\n          currentNode.children!.push({\r\n            type: \"Comment\",\r\n            value: token.value || \"\",\r\n          });\r\n          break;\r\n        }\r\n  \r\n        case \"Doctype\": {\r\n          currentNode.children!.push({\r\n            type: \"Doctype\",\r\n            value: token.value || \"\",\r\n          });\r\n          break;\r\n        }\r\n  \r\n        default:\r\n          throw new Error(`Unexpected token type: \"${token.type}\".`);\r\n      }\r\n    }\r\n  \r\n    if (stack.length > 1) {\r\n      const unclosedTag = stack.pop()!;\r\n      throw new Error(`Unclosed tag: \"${unclosedTag.name}\".`);\r\n    }\r\n  \r\n    const root = virtualRoot.children![0];\r\n    const metadata = this.computeMetadata(root);\r\n  \r\n    return new DOMXMLAST(root, metadata);\r\n  }\r\n\r\n  /**\r\n   * Computes metadata for the AST.\r\n   * @param root - The root node of the AST.\r\n   * @returns Metadata containing node counts.\r\n   */\r\n  private computeMetadata(root: DOMXMLASTNode): DOMXMLAST[\"metadata\"] {\r\n    let nodeCount = 0;\r\n    let elementCount = 0;\r\n    let textCount = 0;\r\n    let commentCount = 0;\r\n\r\n    const traverse = (node: DOMXMLASTNode) => {\r\n      nodeCount++;\r\n      switch (node.type) {\r\n        case \"Element\":\r\n          elementCount++;\r\n          node.children?.forEach(traverse);\r\n          break;\r\n        case \"Text\":\r\n          textCount++;\r\n          break;\r\n        case \"Comment\":\r\n          commentCount++;\r\n          break;\r\n      }\r\n    };\r\n\r\n    traverse(root);\r\n\r\n    return {\r\n      nodeCount,\r\n      elementCount,\r\n      textCount,\r\n      commentCount,\r\n    };\r\n  }\r\n}\r\n","export abstract class XMLBaseTokenizer {\r\n  protected input: string;\r\n  protected position: number;\r\n  protected line: number;\r\n  protected column: number;\r\n  protected type: string | undefined;\r\n\r\n  constructor(input: string) {\r\n    this.input = input;\r\n    this.position = 0;\r\n    this.line = 1;\r\n    this.column = 1;\r\n  }\r\n\r\n  public abstract tokenize(): unknown[];\r\n\r\n  protected peek(offset: number = 0): string {\r\n    return this.input[this.position + offset] || '';\r\n  }\r\n\r\n  protected peekSequence(length: number): string {\r\n    return this.input.slice(this.position, this.position + length);\r\n  }\r\n\r\n  protected matches(str: string): boolean {\r\n    return this.input.startsWith(str, this.position);\r\n  }\r\n  protected consume(): string {\r\n    const char = this.peek();\r\n    if (char === '\\n') {\r\n      this.line++;\r\n      this.column = 1; // Reset column on a new line\r\n    } else {\r\n      this.column++;\r\n    }\r\n    this.position++;\r\n    return char;\r\n  }\r\n  \r\n  \r\n  protected consumeSequence(length: number): string {\r\n    let result = '';\r\n    for (let i = 0; i < length; i++) {\r\n      result += this.consume();\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  protected readUntil(\r\n    stop: string | RegExp,\r\n    options: { escape?: boolean; includeStop?: boolean; skipStop?: boolean } = {}\r\n  ): string {\r\n    const { escape = false, includeStop = false, skipStop = true } = options;\r\n    let result = '';\r\n    let escaped = false;\r\n  \r\n    while (this.position < this.input.length) {\r\n      const current = this.peek();\r\n  \r\n      // Handle escape sequences if `escape` is enabled\r\n      if (escape && current === '\\\\' && !escaped) {\r\n        escaped = true;\r\n        result += this.consume();\r\n        continue;\r\n      }\r\n  \r\n      const matches =\r\n        typeof stop === 'string' ? this.matches(stop) : stop.test(current);\r\n  \r\n      // Check for the stop condition\r\n      if (!escaped && matches) {\r\n        if (includeStop) {\r\n          if (typeof stop === 'string') {\r\n            result += this.consumeSequence(stop.length); // Consume the stop string\r\n          } else {\r\n            result += this.consume(); // Consume the matching character\r\n          }\r\n        } else if (skipStop) {\r\n          this.position += typeof stop === 'string' ? stop.length : 1; // Skip the stop character(s)\r\n        }\r\n        break; // Exit the loop once the stop condition is met\r\n      }\r\n  \r\n      // Append the current character to the result\r\n      result += this.consume();\r\n      escaped = false; // Reset escape flag after consuming a character\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  \r\n\r\n  protected readWhile(predicate: (char: string, index: number) => boolean): string {\r\n    let result = '';\r\n    let index = 0;\r\n    \r\n    while (this.position < this.input.length && predicate(this.peek(), index)) {\r\n      result += this.consume();\r\n      index++;\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  protected skipWhitespace(): void {\r\n    this.readWhile(char => /\\s/.test(char));\r\n  }\r\n\r\n  protected getCurrentLocation(): { line: number; column: number } {\r\n    return { line: this.line, column: this.column };\r\n  }\r\n\r\n  protected isNameChar(char: string): boolean {\r\n    return /[a-zA-Z0-9_\\-:]/.test(char);\r\n  }\r\n\r\n  protected isIdentifierStart(char: string): boolean {\r\n    return /[a-zA-Z_]/.test(char);\r\n  }\r\n\r\n  protected isIdentifierPart(char: string): boolean {\r\n    return /[a-zA-Z0-9_\\-]/.test(char);\r\n  }\r\n\r\n  protected readIdentifier(): string {\r\n    if (!this.isIdentifierStart(this.peek())) {\r\n      return '';\r\n    }\r\n    return this.readWhile((char, index) => \r\n      index === 0 ? this.isIdentifierStart(char) : this.isIdentifierPart(char)\r\n    );\r\n  }\r\n\r\n  protected readQuotedString(): string {\r\n    const quote = this.peek();\r\n    if (quote !== '\"' && quote !== \"'\") {\r\n      return '';\r\n    }\r\n\r\n    this.consume(); // Skip opening quote\r\n    const value = this.readUntil(quote, { escape: true });\r\n    this.consume(); // Skip closing quote\r\n    return value;\r\n  }\r\n\r\n  protected hasMore(): boolean {\r\n    return this.position < this.input.length;\r\n  }\r\n\r\n  protected addError(message: string): void {\r\n    const location = this.getCurrentLocation();\r\n    console.error(`Error at line ${location.line}, column ${location.column}: ${message}`);\r\n  }\r\n\r\n  protected saveState(): { position: number; line: number; column: number } {\r\n    return {\r\n      position: this.position,\r\n      line: this.line,\r\n      column: this.column\r\n    };\r\n  }\r\n\r\n  protected restoreState(state: { position: number; line: number; column: number }): void {\r\n    this.position = state.position;\r\n    this.line = state.line;\r\n    this.column = state.column;\r\n  }\r\n}","import { XMLBaseTokenizer } from './XMLBaseTokenizer';\r\n\r\nexport interface DOMXMLToken {\r\n  type: 'StartTag' | 'EndTag' | 'Text' | 'Comment' | 'Doctype';\r\n  name?: string;\r\n  value?: string;\r\n  attributes?: Record<string, string>;\r\n  selfClosing?: boolean;\r\n  location: { line: number; column: number };\r\n}\r\n\r\nexport class DOMXMLTokenizer extends XMLBaseTokenizer {\r\n  constructor(input: string) {\r\n    super(input);\r\n  }\r\n  \r\n\r\n  public tokenize(): DOMXMLToken[] {\r\n    const tokens: DOMXMLToken[] = [];\r\n    let textStart: { line: number; column: number } | null = null;\r\n    let textContent = '';\r\n\r\n    while (this.position < this.input.length) {\r\n      const char = this.peek();\r\n      const currentPosition = { line: this.line, column: this.column };\r\n\r\n      if (char === '<') {\r\n        // Flush accumulated text content\r\n        if (textContent.trim()) {\r\n          tokens.push({\r\n            type: 'Text',\r\n            value: textContent.trim(),\r\n            location: textStart!,\r\n          });\r\n        }\r\n        textContent = '';\r\n        textStart = null;\r\n\r\n        // Process tags\r\n        if (this.matches('<!--')) {\r\n          tokens.push(this.readComment(currentPosition));\r\n        } else if (this.matches('<!DOCTYPE')) {\r\n          tokens.push(this.readDoctype(currentPosition));\r\n        } else if (this.peek(1) === '/') {\r\n          tokens.push(this.readEndTag(currentPosition));\r\n        } else {\r\n          tokens.push(this.readStartTag(currentPosition));\r\n        }\r\n      } else {\r\n        // Accumulate text content\r\n        if (!textStart) {\r\n          textStart = { ...currentPosition };\r\n        }\r\n        textContent += this.consume();\r\n      }\r\n    }\r\n\r\n    // Add remaining text content\r\n    if (textContent.trim()) {\r\n      tokens.push({\r\n        type: 'Text',\r\n        value: textContent.trim(),\r\n        location: textStart!,\r\n      });\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n  public readText(): DOMXMLToken {\r\n    const startLocation = this.getCurrentLocation();\r\n    const value = this.readUntil('<', { includeStop: false }); // Stop before the next tag\r\n  \r\n    return {\r\n      type: 'Text',\r\n      value: value.trim(),\r\n      location: startLocation, // Correct start position of the text\r\n    };\r\n  }\r\n  \r\n  private readStartTag(startLocation: { line: number; column: number }): DOMXMLToken {\r\n    this.consume(); // Skip '<'\r\n    const name = this.readTagName();\r\n    const attributes = this.readAttributes();\r\n    let selfClosing = false;\r\n  \r\n    this.skipWhitespace();\r\n    if (this.peek() === '/') {\r\n      selfClosing = true;\r\n      this.consume(); // Skip '/'\r\n    }\r\n    if (this.peek() === '>') {\r\n      this.consume(); // Skip '>'\r\n    }\r\n  \r\n    return {\r\n      type: 'StartTag',\r\n      name,\r\n      attributes,\r\n      selfClosing,\r\n      location: startLocation, // Correctly tracks initial position\r\n    };\r\n  }\r\n  \r\n  \r\n  private readEndTag(startLocation: { line: number; column: number }): DOMXMLToken {\r\n    this.consumeSequence(2); // Skip '</'\r\n    const name = this.readTagName();\r\n    this.skipWhitespace();\r\n    if (this.peek() === '>') {\r\n      this.consume();\r\n    }\r\n\r\n    return {\r\n      type: 'EndTag',\r\n      name,\r\n      location: startLocation,\r\n    };\r\n  }\r\n\r\n  private readComment(startLocation: { line: number; column: number }): DOMXMLToken {\r\n    this.consumeSequence(4); // Skip '<!--'\r\n    const value = this.readUntil('-->');\r\n    this.consumeSequence(3); // Skip '-->'\r\n    return {\r\n      type: 'Comment',\r\n      value: value.trim(),\r\n      location: startLocation,\r\n    };\r\n  }\r\n\r\n  private readDoctype(startLocation: { line: number; column: number }): DOMXMLToken {\r\n    this.consumeSequence(9); // Skip '<!DOCTYPE'\r\n    this.skipWhitespace();\r\n    const value = this.readUntil('>');\r\n    this.consume(); // Skip '>'\r\n    return {\r\n      type: 'Doctype',\r\n      value: value.trim(),\r\n      location: startLocation,\r\n    };\r\n  }\r\n\r\n  private readAttributes(): Record<string, string> {\r\n    const attributes: Record<string, string> = {};\r\n\r\n    while (this.position < this.input.length) {\r\n      this.skipWhitespace();\r\n      if (this.peek() === '>' || this.peek() === '/' || !this.peek()) {\r\n        break;\r\n      }\r\n\r\n      const name = this.readAttributeName();\r\n      if (!name) break;\r\n\r\n      this.skipWhitespace();\r\n      if (this.peek() === '=') {\r\n        this.consume(); // Skip '='\r\n        this.skipWhitespace();\r\n        attributes[name] = this.readAttributeValue();\r\n      } else {\r\n        attributes[name] = 'true'; // Boolean attribute\r\n      }\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n  \r\n  private readTagName(): string {\r\n    return this.readWhile((char) => this.isNameChar(char));\r\n  }\r\n\r\n  private readAttributeName(): string {\r\n    return this.readWhile((char) => this.isNameChar(char));\r\n  }\r\n\r\n  private readAttributeValue(): string {\r\n    const quote = this.peek();\r\n    if (quote === '\"' || quote === \"'\") {\r\n      this.consume(); // Skip opening quote\r\n      const value = this.readUntil(quote);\r\n      this.consume(); // Skip closing quote\r\n      return value;\r\n    }\r\n    return this.readUntil(/[\\s>\\/]/);\r\n  }\r\n}\r\n","import { DOMXMLAST, DOMXMLASTNode } from \"../ast/DOMXMLAST\";\r\n\r\nexport interface ValidationOptions {\r\n  strictMode?: boolean;\r\n  allowUnknownElements?: boolean;\r\n  schema?: XMLSchema;\r\n  customValidators?: Array<(ast: DOMXMLAST) => ValidationError[]>;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  valid: boolean;\r\n  errors: ValidationError[];\r\n}\r\n\r\nexport interface ValidationError {\r\n  code: string;\r\n  message: string;\r\n  line?: number;\r\n  column?: number;\r\n  nodePath?: string;\r\n}\r\n\r\nexport interface XMLSchema {\r\n  elements: Record<string, XMLElementSchema>;\r\n}\r\n\r\nexport interface XMLElementSchema {\r\n  attributes?: string[];\r\n  required?: string[];\r\n  children?: string[];\r\n  minOccurs?: number;\r\n  maxOccurs?: number;\r\n}\r\n\r\nexport class DOMXMLValidator {\r\n  private options: Required<ValidationOptions>;\r\n  private schema?: XMLSchema;\r\n\r\n  constructor(options: ValidationOptions = {}) {\r\n    this.options = {\r\n      strictMode: false,\r\n      allowUnknownElements: true,\r\n      schema: options.schema,\r\n      customValidators: options.customValidators || [],\r\n    } as Required<ValidationOptions>;\r\n\r\n    this.schema = options.schema;\r\n  }\r\n\r\n  public validate(ast: DOMXMLAST): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n\r\n    if (this.schema) {\r\n      this.validateNode(ast.root, errors, []);\r\n    }\r\n\r\n    this.options.customValidators.forEach((validator) => {\r\n      errors.push(...validator(ast));\r\n    });\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n    };\r\n  }\r\n\r\n  private validateNode(\r\n    node: DOMXMLASTNode,\r\n    errors: ValidationError[],\r\n    path: string[],\r\n  ): void {\r\n    if (node.type !== \"Element\") return;\r\n\r\n    const currentPath = [...path, node.name || \"\"];\r\n\r\n    if (this.schema?.elements) {\r\n      const elementSchema = this.schema.elements[node.name || \"\"];\r\n\r\n      if (!elementSchema && this.options.strictMode) {\r\n        errors.push({\r\n          code: \"UNKNOWN_ELEMENT\",\r\n          message: `Unknown element: ${node.name}`,\r\n          nodePath: currentPath.join(\"/\"),\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (elementSchema) {\r\n        this.validateAttributes(node, elementSchema, errors, currentPath);\r\n        this.validateChildren(node, elementSchema, errors, currentPath);\r\n      }\r\n    }\r\n\r\n    node.children?.forEach((child:DOMXMLASTNode) => {\r\n      this.validateNode(child, errors, currentPath);\r\n    });\r\n  }\r\n\r\n  private validateAttributes(\r\n    node: DOMXMLASTNode,\r\n    schema: XMLElementSchema,\r\n    errors: ValidationError[],\r\n    path: string[],\r\n  ): void {\r\n    const attributes = node.attributes || {};\r\n\r\n    // Check required attributes\r\n    schema.required?.forEach((required) => {\r\n      if (!attributes[required]) {\r\n        errors.push({\r\n          code: \"MISSING_REQUIRED_ATTRIBUTE\",\r\n          message: `Missing required attribute: ${required}`,\r\n          nodePath: path.join(\"/\"),\r\n        });\r\n      }\r\n    });\r\n\r\n    // Check unknown attributes in strict mode\r\n    if (this.options.strictMode && schema.attributes) {\r\n      Object.keys(attributes).forEach((attr) => {\r\n        if (!schema.attributes?.includes(attr)) {\r\n          errors.push({\r\n            code: \"UNKNOWN_ATTRIBUTE\",\r\n            message: `Unknown attribute: ${attr}`,\r\n            nodePath: path.join(\"/\"),\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private validateChildren(\r\n    node: DOMXMLASTNode,\r\n    schema: XMLElementSchema,\r\n    errors: ValidationError[],\r\n    path: string[],\r\n  ): void {\r\n    const children = node.children || [];\r\n    const elementChildren = children.filter(\r\n      (child:DOMXMLASTNode) => child.type === \"Element\",\r\n    );\r\n\r\n    if (schema.children) {\r\n      elementChildren.forEach((child:DOMXMLASTNode) => {\r\n        if (\r\n          child.type === \"Element\" &&\r\n          !schema.children?.includes(child.name || \"\")\r\n        ) {\r\n          errors.push({\r\n            code: \"INVALID_CHILD_ELEMENT\",\r\n            message: `Invalid child element: ${child.name}`,\r\n            nodePath: path.join(\"/\"),\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { DOMXMLAST } from \"./ast/DOMXMLAST\";\r\nimport { DOMXMLASTOptimizer } from \"./ast/DOMXMLASTOptimizer\";\r\nimport { GeneratorOptions, DOMXMLGenerator } from \"./generator/DOMXMLGenerator\";\r\nimport { DOMXMLParser } from \"./parser/DOMXMLParser\";\r\nimport { DOMXMLTokenizer } from \"./tokenizer/DOMXMLTokenizer\";\r\nimport { ValidationOptions, DOMXMLValidator, ValidationResult } from \"./validator/DOMXMLValidator\";\r\n\r\n// Export AST types and components\r\nexport type { DOMXMLAST, DOMXMLASTNode } from \"./ast/DOMXMLAST\";\r\nexport { DOMXMLASTOptimizer } from \"./ast/DOMXMLASTOptimizer\";\r\n\r\n// Export tokenizer components\r\nexport { XMLBaseTokenizer } from \"./tokenizer/XMLBaseTokenizer\";\r\nexport { DOMXMLTokenizer } from \"./tokenizer/DOMXMLTokenizer\";\r\nexport type { DOMXMLToken } from \"./tokenizer/DOMXMLTokenizer\";\r\n\r\n// Export parser\r\nexport { DOMXMLParser } from \"./parser/DOMXMLParser\";\r\n\r\n// Export generator\r\nexport { DOMXMLGenerator } from \"./generator/DOMXMLGenerator\";\r\nexport type { GeneratorOptions } from \"./generator/DOMXMLGenerator\";\r\n\r\n// Export validator\r\nexport {\r\n  DOMXMLValidator,\r\n  type ValidationOptions,\r\n  type ValidationResult,\r\n  type ValidationError,\r\n  type XMLSchema,\r\n  type XMLElementSchema,\r\n} from \"./validator/DOMXMLValidator\";\r\n\r\n// Export main interface\r\nexport interface DOMXMLOptions {\r\n  validateOnParse?: boolean;\r\n  optimizeAST?: boolean;\r\n  generatorOptions?: GeneratorOptions;\r\n  validationOptions?: ValidationOptions;\r\n}\r\n\r\nexport class DOMXML {\r\n  private tokenizer: DOMXMLTokenizer;\r\n  private parser: DOMXMLParser;\r\n  private optimizer: DOMXMLASTOptimizer;\r\n  private generator: DOMXMLGenerator;\r\n  private validator: DOMXMLValidator;\r\n  private options: DOMXMLOptions;\r\n\r\n  constructor(options: DOMXMLOptions = {}) {\r\n    this.options = {\r\n      validateOnParse: false,\r\n      optimizeAST: true,\r\n      ...options,\r\n    };\r\n\r\n    this.tokenizer = new DOMXMLTokenizer(\"\");\r\n    this.parser = new DOMXMLParser();\r\n    this.optimizer = new DOMXMLASTOptimizer();\r\n    this.generator = new DOMXMLGenerator(options.generatorOptions);\r\n    this.validator = new DOMXMLValidator(options.validationOptions);\r\n  }\r\n\r\n  public parse(input: string): DOMXMLAST {\r\n    this.tokenizer = new DOMXMLTokenizer(input);\r\n    const tokens = this.tokenizer.tokenize();\r\n    \r\n    // Update parser with new tokens\r\n    this.parser.setTokens(tokens);\r\n    let ast = this.parser.parse();\r\n\r\n    if (this.options.validateOnParse) {\r\n      const validationResult = this.validator.validate(ast);\r\n      if (!validationResult.valid) {\r\n        throw new Error(\r\n          `XML Validation failed: ${JSON.stringify(validationResult.errors)}`\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this.options.optimizeAST) {\r\n      ast = this.optimizer.optimize(ast);\r\n    }\r\n\r\n    return ast;\r\n  }\r\n\r\n  // Rest of the implementation remains the same\r\n  public generate(ast: DOMXMLAST): string {\r\n    return this.generator.generate(ast);\r\n  }\r\n\r\n  public validate(ast: DOMXMLAST): ValidationResult {\r\n    return this.validator.validate(ast);\r\n  }\r\n\r\n  public optimize(ast: DOMXMLAST): DOMXMLAST {\r\n    return this.optimizer.optimize(ast);\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;MAea,SAAS,CAAA;IACpB,WACS,CAAA,IAAmB,EACnB,QAAwB,EAAA;QADxB,IAAI,CAAA,IAAA,GAAJ,IAAI;QACJ,IAAQ,CAAA,QAAA,GAAR,QAAQ;;IAGjB,eAAe,GAAA;QACb,IAAI,SAAS,GAAG,CAAC;QACjB,IAAI,YAAY,GAAG,CAAC;QACpB,IAAI,SAAS,GAAG,CAAC;QACjB,IAAI,YAAY,GAAG,CAAC;AAEpB,QAAA,MAAM,QAAQ,GAAG,CAAC,IAAmB,KAAI;AACvC,YAAA,SAAS,EAAE;AACX,YAAA,QAAQ,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,SAAS;AACZ,oBAAA,YAAY,EAAE;oBACd;AACF,gBAAA,KAAK,MAAM;AACT,oBAAA,SAAS,EAAE;oBACX;AACF,gBAAA,KAAK,SAAS;AACZ,oBAAA,YAAY,EAAE;oBACd;;AAEJ,YAAA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC;AAClC,SAAC;AAED,QAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAEnB,OAAO;YACL,SAAS;YACT,YAAY;YACZ,SAAS;YACT,YAAY;SACb;;IAEH,YAAY,CAAC,MAAqB,EAAE,KAAoB,EAAA;QACtD,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,EAAE;AACvC,QAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;;IAG7B,eAAe,CAAC,MAAqB,EAAE,KAAoB,EAAA;QACzD,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,EAAE;;AAEtE;;MC1DY,kBAAkB,CAAA;AAC7B;;AAEG;AACI,IAAA,QAAQ,CAAC,GAAc,EAAA;QAC5B,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AACrD,QAAA,OAAO,IAAI,SAAS,CAAC,aAAa,EAAE,QAAQ,CAAC;;AAGxC,IAAA,gBAAgB,CAAC,QAAyB,EAAA;;QAE/C,IAAI,SAAS,GAAG;AACb,aAAA,MAAM,CAAC,CAAC,IAAI,KAAI;AACf,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;;gBAExB,OAAO,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;;AAElC,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;;AAE3B,gBAAA,OAAO,IAAI;;YAEb,OAAO,IAAI,CAAC;AACd,SAAC;AACA,aAAA,GAAG,CAAC,CAAC,IAAI,KACR,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC;AAC9B,cAAE,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;cACzD,IAAI,CACT;;QAGH,IAAI,CAAC,GAAG,CAAC;QACT,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AAC/B,YAAA,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7B,YAAA,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;gBACnD,OAAO,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;gBAC3D,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;iBACtB;AACL,gBAAA,CAAC,EAAE;;;AAIP,QAAA,OAAO,SAAS;;AAIV,IAAA,YAAY,CAAC,IAAmB,EAAA;AACtC,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;;AAEtD,QAAA,OAAO,IAAI;;AAGb;;AAEG;AACI,IAAA,eAAe,CAAC,IAAmB,EAAA;QACxC,IAAI,SAAS,GAAG,CAAC;QACjB,IAAI,YAAY,GAAG,CAAC;QACpB,IAAI,SAAS,GAAG,CAAC;QACjB,IAAI,YAAY,GAAG,CAAC;AAEpB,QAAA,MAAM,QAAQ,GAAG,CAAC,IAAmB,KAAI;AACvC,YAAA,SAAS,EAAE;AACX,YAAA,QAAQ,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,SAAS;AACZ,oBAAA,YAAY,EAAE;oBACd;AACF,gBAAA,KAAK,MAAM;AACT,oBAAA,SAAS,EAAE;oBACX;AACF,gBAAA,KAAK,SAAS;AACZ,oBAAA,YAAY,EAAE;oBACd;;AAEJ,YAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,gBAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;;AAEnC,SAAC;QAED,QAAQ,CAAC,IAAI,CAAC;QAEd,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE;;AAE9D;;MC9EY,eAAe,CAAA;AAG1B,IAAA,WAAA,CAAY,UAA4B,EAAE,EAAA;QACxC,IAAI,CAAC,OAAO,GAAG;AACb,YAAA,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,IAAI;AAC9B,YAAA,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,IAAI;AAChC,YAAA,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,IAAI;AAC9C,YAAA,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,IAAI;SACzC;;AAGI,IAAA,QAAQ,CAAC,GAAc,EAAA;QAC5B,IAAI,MAAM,GAAG,EAAE;AAEf,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC/B,MAAM,IAAI,wCAAwC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;;QAG3E,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AACxC,QAAA,OAAO,MAAM;;IAGP,YAAY,CAAC,IAAmB,EAAE,KAAa,EAAA;AACrD,QAAA,QAAQ,IAAI,CAAC,IAAI;AACf,YAAA,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC;AAC1C,YAAA,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC;AACvC,YAAA,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC;AAC1C,YAAA,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC;AAC1C,YAAA;gBACE,MAAM,IAAI,KAAK,CAAC,CAAA,mBAAA,EAAsB,IAAI,CAAC,IAAI,CAAE,CAAA,CAAC;;;IAIhD,eAAe,CAAC,IAAmB,EAAE,KAAa,EAAA;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE;AACpE,QAAA,IAAI,MAAM,GAAG,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAE7C,QAAA,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU;iBACrC,GAAG,CACF,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAA,CAAA,EAAI,GAAG,CAAK,EAAA,EAAA,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA,CAAA,CAAG;iBAErE,IAAI,CAAC,EAAE,CAAC;;AAGb,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE;YAC1B,OAAO,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;;QAG7C,MAAM,IAAI,GAAG;AAEb,QAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;AAClE,YAAA,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;AACvD,YAAA,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;AACvD,YAAA,OAAO,MAAM;;AAGf,QAAA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO;AAE9B,QAAA,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC;;AAG/C,QAAA,MAAM,IAAI,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;AAChE,QAAA,OAAO,MAAM;;IAGP,YAAY,CAAC,IAAmB,EAAE,KAAa,EAAA;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE;AACpE,QAAA,OAAO,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;;IAGlE,eAAe,CAAC,IAAmB,EAAE,KAAa,EAAA;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE;AACpE,QAAA,OAAO,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;;IAGpE,eAAe,CAAC,IAAmB,EAAE,KAAa,EAAA;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE;QACpE,QACE,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;;AAInE,IAAA,SAAS,CAAC,KAAa,EAAA;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;;AAGlC,IAAA,UAAU,CAAC,IAAY,EAAA;AAC7B,QAAA,OAAO;AACJ,aAAA,OAAO,CAAC,IAAI,EAAE,OAAO;AACrB,aAAA,OAAO,CAAC,IAAI,EAAE,MAAM;AACpB,aAAA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;;AAGlB,IAAA,eAAe,CAAC,IAAY,EAAA;AAClC,QAAA,OAAO;AACJ,aAAA,OAAO,CAAC,IAAI,EAAE,OAAO;AACrB,aAAA,OAAO,CAAC,IAAI,EAAE,MAAM;AACpB,aAAA,OAAO,CAAC,IAAI,EAAE,MAAM;AACpB,aAAA,OAAO,CAAC,IAAI,EAAE,QAAQ;AACtB,aAAA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;;AAE7B;;MClHY,YAAY,CAAA;AAIvB,IAAA,WAAA,CAAY,MAAsB,EAAA;AAChC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE;AAC1B,QAAA,IAAI,CAAC,QAAQ,GAAG,CAAC;;AAGnB;;;AAGG;AACI,IAAA,SAAS,CAAC,MAAqB,EAAA;AACpC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;AACpB,QAAA,IAAI,CAAC,QAAQ,GAAG,CAAC;;AAGnB;;;AAGG;IACI,KAAK,GAAA;AACV,QAAA,IAAI,CAAC,QAAQ,GAAG,CAAC;AAEjB,QAAA,MAAM,WAAW,GAAkB;AACjC,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,IAAI,EAAE,WAAW;AACjB,YAAA,QAAQ,EAAE,EAAE;AACZ,YAAA,UAAU,EAAE,EAAE;SACf;AAED,QAAA,MAAM,KAAK,GAAoB,CAAC,WAAW,CAAC;QAC5C,IAAI,WAAW,GAAG,WAAW;QAE7B,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACzC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;AAE1C,YAAA,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,UAAU,EAAE;AACf,oBAAA,MAAM,WAAW,GAAkB;AACjC,wBAAA,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,KAAK,CAAC,IAAK;AACjB,wBAAA,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,EAAE;AAClC,wBAAA,QAAQ,EAAE,EAAE;qBACb;AACD,oBAAA,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC,WAAW,CAAC;AACvC,oBAAA,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;AACtB,wBAAA,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;wBACvB,WAAW,GAAG,WAAW;;oBAE3B;;gBAGF,KAAK,QAAQ,EAAE;AACb,oBAAA,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,wBAAA,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,EAAG;wBAC5B,IAAI,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;AAC/B,4BAAA,MAAM,IAAI,KAAK,CACb,CAAA,2CAAA,EAA8C,OAAO,CAAC,IAAI,CAAA,cAAA,EAAiB,KAAK,CAAC,IAAI,CAAA,EAAA,CAAI,CAC1F;;wBAEH,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;;yBAChC;wBACL,MAAM,IAAI,KAAK,CAAC,CAAA,yBAAA,EAA4B,KAAK,CAAC,IAAI,CAAI,EAAA,CAAA,CAAC;;oBAE7D;;gBAGF,KAAK,MAAM,EAAE;oBACX,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE;oBACrC,IAAI,SAAS,EAAE;AACb,wBAAA,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC;AACzB,4BAAA,IAAI,EAAE,MAAM;AACZ,4BAAA,KAAK,EAAE,SAAS;AACjB,yBAAA,CAAC;;oBAEJ;;gBAGF,KAAK,SAAS,EAAE;AACd,oBAAA,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC;AACzB,wBAAA,IAAI,EAAE,SAAS;AACf,wBAAA,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE;AACzB,qBAAA,CAAC;oBACF;;gBAGF,KAAK,SAAS,EAAE;AACd,oBAAA,WAAW,CAAC,QAAS,CAAC,IAAI,CAAC;AACzB,wBAAA,IAAI,EAAE,SAAS;AACf,wBAAA,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE;AACzB,qBAAA,CAAC;oBACF;;AAGF,gBAAA;oBACE,MAAM,IAAI,KAAK,CAAC,CAAA,wBAAA,EAA2B,KAAK,CAAC,IAAI,CAAI,EAAA,CAAA,CAAC;;;AAIhE,QAAA,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,YAAA,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAG;YAChC,MAAM,IAAI,KAAK,CAAC,CAAA,eAAA,EAAkB,WAAW,CAAC,IAAI,CAAI,EAAA,CAAA,CAAC;;QAGzD,MAAM,IAAI,GAAG,WAAW,CAAC,QAAS,CAAC,CAAC,CAAC;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;AAE3C,QAAA,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC;;AAGtC;;;;AAIG;AACK,IAAA,eAAe,CAAC,IAAmB,EAAA;QACzC,IAAI,SAAS,GAAG,CAAC;QACjB,IAAI,YAAY,GAAG,CAAC;QACpB,IAAI,SAAS,GAAG,CAAC;QACjB,IAAI,YAAY,GAAG,CAAC;AAEpB,QAAA,MAAM,QAAQ,GAAG,CAAC,IAAmB,KAAI;AACvC,YAAA,SAAS,EAAE;AACX,YAAA,QAAQ,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,SAAS;AACZ,oBAAA,YAAY,EAAE;AACd,oBAAA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC;oBAChC;AACF,gBAAA,KAAK,MAAM;AACT,oBAAA,SAAS,EAAE;oBACX;AACF,gBAAA,KAAK,SAAS;AACZ,oBAAA,YAAY,EAAE;oBACd;;AAEN,SAAC;QAED,QAAQ,CAAC,IAAI,CAAC;QAEd,OAAO;YACL,SAAS;YACT,YAAY;YACZ,SAAS;YACT,YAAY;SACb;;AAEJ;;MCvJqB,gBAAgB,CAAA;AAOpC,IAAA,WAAA,CAAY,KAAa,EAAA;AACvB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK;AAClB,QAAA,IAAI,CAAC,QAAQ,GAAG,CAAC;AACjB,QAAA,IAAI,CAAC,IAAI,GAAG,CAAC;AACb,QAAA,IAAI,CAAC,MAAM,GAAG,CAAC;;IAKP,IAAI,CAAC,SAAiB,CAAC,EAAA;AAC/B,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,EAAE;;AAGvC,IAAA,YAAY,CAAC,MAAc,EAAA;AACnC,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;;AAGtD,IAAA,OAAO,CAAC,GAAW,EAAA;AAC3B,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC;;IAExC,OAAO,GAAA;AACf,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE;AACxB,QAAA,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,CAAC,IAAI,EAAE;AACX,YAAA,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;aACX;YACL,IAAI,CAAC,MAAM,EAAE;;QAEf,IAAI,CAAC,QAAQ,EAAE;AACf,QAAA,OAAO,IAAI;;AAIH,IAAA,eAAe,CAAC,MAAc,EAAA;QACtC,IAAI,MAAM,GAAG,EAAE;AACf,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/B,YAAA,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;;AAE1B,QAAA,OAAO,MAAM;;AAGL,IAAA,SAAS,CACjB,IAAqB,EACrB,OAAA,GAA2E,EAAE,EAAA;AAE7E,QAAA,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,WAAW,GAAG,KAAK,EAAE,QAAQ,GAAG,IAAI,EAAE,GAAG,OAAO;QACxE,IAAI,MAAM,GAAG,EAAE;QACf,IAAI,OAAO,GAAG,KAAK;QAEnB,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;AACxC,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE;;YAG3B,IAAI,MAAM,IAAI,OAAO,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC1C,OAAO,GAAG,IAAI;AACd,gBAAA,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBACxB;;YAGF,MAAM,OAAO,GACX,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;;AAGpE,YAAA,IAAI,CAAC,OAAO,IAAI,OAAO,EAAE;gBACvB,IAAI,WAAW,EAAE;AACf,oBAAA,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;wBAC5B,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;yBACvC;AACL,wBAAA,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;;;qBAEtB,IAAI,QAAQ,EAAE;AACnB,oBAAA,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;AAE9D,gBAAA,MAAM;;;AAIR,YAAA,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;AACxB,YAAA,OAAO,GAAG,KAAK,CAAC;;AAGlB,QAAA,OAAO,MAAM;;AAIL,IAAA,SAAS,CAAC,SAAmD,EAAA;QACrE,IAAI,MAAM,GAAG,EAAE;QACf,IAAI,KAAK,GAAG,CAAC;QAEb,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,EAAE;AACzE,YAAA,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;AACxB,YAAA,KAAK,EAAE;;AAGT,QAAA,OAAO,MAAM;;IAGL,cAAc,GAAA;AACtB,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAG/B,kBAAkB,GAAA;AAC1B,QAAA,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;;AAGvC,IAAA,UAAU,CAAC,IAAY,EAAA;AAC/B,QAAA,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;;AAG3B,IAAA,iBAAiB,CAAC,IAAY,EAAA;AACtC,QAAA,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;;AAGrB,IAAA,gBAAgB,CAAC,IAAY,EAAA;AACrC,QAAA,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;;IAG1B,cAAc,GAAA;QACtB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE;AACxC,YAAA,OAAO,EAAE;;AAEX,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,KAAK,KAChC,KAAK,KAAK,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CACzE;;IAGO,gBAAgB,GAAA;AACxB,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE;QACzB,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,GAAG,EAAE;AAClC,YAAA,OAAO,EAAE;;AAGX,QAAA,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;AACrD,QAAA,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,QAAA,OAAO,KAAK;;IAGJ,OAAO,GAAA;QACf,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;;AAGhC,IAAA,QAAQ,CAAC,OAAe,EAAA;AAChC,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,EAAE;AAC1C,QAAA,OAAO,CAAC,KAAK,CAAC,CAAA,cAAA,EAAiB,QAAQ,CAAC,IAAI,CAAY,SAAA,EAAA,QAAQ,CAAC,MAAM,CAAA,EAAA,EAAK,OAAO,CAAA,CAAE,CAAC;;IAG9E,SAAS,GAAA;QACjB,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC;SACd;;AAGO,IAAA,YAAY,CAAC,KAAyD,EAAA;AAC9E,QAAA,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ;AAC9B,QAAA,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI;AACtB,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM;;AAE7B;;AC5JK,MAAO,eAAgB,SAAQ,gBAAgB,CAAA;AACnD,IAAA,WAAA,CAAY,KAAa,EAAA;QACvB,KAAK,CAAC,KAAK,CAAC;;IAIP,QAAQ,GAAA;QACb,MAAM,MAAM,GAAkB,EAAE;QAChC,IAAI,SAAS,GAA4C,IAAI;QAC7D,IAAI,WAAW,GAAG,EAAE;QAEpB,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;AACxC,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE;AACxB,YAAA,MAAM,eAAe,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;AAEhE,YAAA,IAAI,IAAI,KAAK,GAAG,EAAE;;AAEhB,gBAAA,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE;oBACtB,MAAM,CAAC,IAAI,CAAC;AACV,wBAAA,IAAI,EAAE,MAAM;AACZ,wBAAA,KAAK,EAAE,WAAW,CAAC,IAAI,EAAE;AACzB,wBAAA,QAAQ,EAAE,SAAU;AACrB,qBAAA,CAAC;;gBAEJ,WAAW,GAAG,EAAE;gBAChB,SAAS,GAAG,IAAI;;AAGhB,gBAAA,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;;AACzC,qBAAA,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;oBACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;;qBACzC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;;qBACxC;oBACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;;;iBAE5C;;gBAEL,IAAI,CAAC,SAAS,EAAE;AACd,oBAAA,SAAS,GAAG,EAAE,GAAG,eAAe,EAAE;;AAEpC,gBAAA,WAAW,IAAI,IAAI,CAAC,OAAO,EAAE;;;;AAKjC,QAAA,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC;AACV,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,KAAK,EAAE,WAAW,CAAC,IAAI,EAAE;AACzB,gBAAA,QAAQ,EAAE,SAAU;AACrB,aAAA,CAAC;;AAGJ,QAAA,OAAO,MAAM;;IAER,QAAQ,GAAA;AACb,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,EAAE;AAC/C,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;QAE1D,OAAO;AACL,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE;YACnB,QAAQ,EAAE,aAAa;SACxB;;AAGK,IAAA,YAAY,CAAC,aAA+C,EAAA;AAClE,QAAA,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;AAC/B,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE;QACxC,IAAI,WAAW,GAAG,KAAK;QAEvB,IAAI,CAAC,cAAc,EAAE;AACrB,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;YACvB,WAAW,GAAG,IAAI;AAClB,YAAA,IAAI,CAAC,OAAO,EAAE,CAAC;;AAEjB,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;AACvB,YAAA,IAAI,CAAC,OAAO,EAAE,CAAC;;QAGjB,OAAO;AACL,YAAA,IAAI,EAAE,UAAU;YAChB,IAAI;YACJ,UAAU;YACV,WAAW;YACX,QAAQ,EAAE,aAAa;SACxB;;AAIK,IAAA,UAAU,CAAC,aAA+C,EAAA;AAChE,QAAA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACxB,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;QAC/B,IAAI,CAAC,cAAc,EAAE;AACrB,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;YACvB,IAAI,CAAC,OAAO,EAAE;;QAGhB,OAAO;AACL,YAAA,IAAI,EAAE,QAAQ;YACd,IAAI;AACJ,YAAA,QAAQ,EAAE,aAAa;SACxB;;AAGK,IAAA,WAAW,CAAC,aAA+C,EAAA;AACjE,QAAA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;AACnC,QAAA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO;AACL,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE;AACnB,YAAA,QAAQ,EAAE,aAAa;SACxB;;AAGK,IAAA,WAAW,CAAC,aAA+C,EAAA;AACjE,QAAA,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,cAAc,EAAE;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;AACjC,QAAA,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO;AACL,YAAA,IAAI,EAAE,SAAS;AACf,YAAA,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE;AACnB,YAAA,QAAQ,EAAE,aAAa;SACxB;;IAGK,cAAc,GAAA;QACpB,MAAM,UAAU,GAA2B,EAAE;QAE7C,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACxC,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE;gBAC9D;;AAGF,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE;AACrC,YAAA,IAAI,CAAC,IAAI;gBAAE;YAEX,IAAI,CAAC,cAAc,EAAE;AACrB,YAAA,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;AACvB,gBAAA,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,cAAc,EAAE;gBACrB,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,kBAAkB,EAAE;;iBACvC;AACL,gBAAA,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;;;AAI9B,QAAA,OAAO,UAAU;;IAGX,WAAW,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;IAGhD,iBAAiB,GAAA;AACvB,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;IAGhD,kBAAkB,GAAA;AACxB,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE;QACzB,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,GAAG,EAAE;AAClC,YAAA,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;AACnC,YAAA,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,YAAA,OAAO,KAAK;;AAEd,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;AAEnC;;MCvJY,eAAe,CAAA;AAI1B,IAAA,WAAA,CAAY,UAA6B,EAAE,EAAA;QACzC,IAAI,CAAC,OAAO,GAAG;AACb,YAAA,UAAU,EAAE,KAAK;AACjB,YAAA,oBAAoB,EAAE,IAAI;YAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;AACtB,YAAA,gBAAgB,EAAE,OAAO,CAAC,gBAAgB,IAAI,EAAE;SAClB;AAEhC,QAAA,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM;;AAGvB,IAAA,QAAQ,CAAC,GAAc,EAAA;QAC5B,MAAM,MAAM,GAAsB,EAAE;AAEpC,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC;;QAGzC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,SAAS,KAAI;YAClD,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;AAChC,SAAC,CAAC;QAEF,OAAO;AACL,YAAA,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC1B,MAAM;SACP;;AAGK,IAAA,YAAY,CAClB,IAAmB,EACnB,MAAyB,EACzB,IAAc,EAAA;AAEd,QAAA,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YAAE;AAE7B,QAAA,MAAM,WAAW,GAAG,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAE9C,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE;AACzB,YAAA,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;YAE3D,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;gBAC7C,MAAM,CAAC,IAAI,CAAC;AACV,oBAAA,IAAI,EAAE,iBAAiB;AACvB,oBAAA,OAAO,EAAE,CAAA,iBAAA,EAAoB,IAAI,CAAC,IAAI,CAAE,CAAA;AACxC,oBAAA,QAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;AAChC,iBAAA,CAAC;gBACF;;YAGF,IAAI,aAAa,EAAE;gBACjB,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,CAAC;gBACjE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,CAAC;;;QAInE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,KAAmB,KAAI;YAC7C,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC;AAC/C,SAAC,CAAC;;AAGI,IAAA,kBAAkB,CACxB,IAAmB,EACnB,MAAwB,EACxB,MAAyB,EACzB,IAAc,EAAA;AAEd,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,EAAE;;QAGxC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,QAAQ,KAAI;AACpC,YAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC;AACV,oBAAA,IAAI,EAAE,4BAA4B;oBAClC,OAAO,EAAE,CAA+B,4BAAA,EAAA,QAAQ,CAAE,CAAA;AAClD,oBAAA,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACzB,iBAAA,CAAC;;AAEN,SAAC,CAAC;;QAGF,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,EAAE;YAChD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;gBACvC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACtC,MAAM,CAAC,IAAI,CAAC;AACV,wBAAA,IAAI,EAAE,mBAAmB;wBACzB,OAAO,EAAE,CAAsB,mBAAA,EAAA,IAAI,CAAE,CAAA;AACrC,wBAAA,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACzB,qBAAA,CAAC;;AAEN,aAAC,CAAC;;;AAIE,IAAA,gBAAgB,CACtB,IAAmB,EACnB,MAAwB,EACxB,MAAyB,EACzB,IAAc,EAAA;AAEd,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE;AACpC,QAAA,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CACrC,CAAC,KAAmB,KAAK,KAAK,CAAC,IAAI,KAAK,SAAS,CAClD;AAED,QAAA,IAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,YAAA,eAAe,CAAC,OAAO,CAAC,CAAC,KAAmB,KAAI;AAC9C,gBAAA,IACE,KAAK,CAAC,IAAI,KAAK,SAAS;AACxB,oBAAA,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,EAC5C;oBACA,MAAM,CAAC,IAAI,CAAC;AACV,wBAAA,IAAI,EAAE,uBAAuB;AAC7B,wBAAA,OAAO,EAAE,CAAA,uBAAA,EAA0B,KAAK,CAAC,IAAI,CAAE,CAAA;AAC/C,wBAAA,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACzB,qBAAA,CAAC;;AAEN,aAAC,CAAC;;;AAGP;;MCpHY,MAAM,CAAA;AAQjB,IAAA,WAAA,CAAY,UAAyB,EAAE,EAAA;QACrC,IAAI,CAAC,OAAO,GAAG;AACb,YAAA,eAAe,EAAE,KAAK;AACtB,YAAA,WAAW,EAAE,IAAI;AACjB,YAAA,GAAG,OAAO;SACX;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC;AACxC,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE;AAChC,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,kBAAkB,EAAE;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,eAAe,CAAC,OAAO,CAAC,gBAAgB,CAAC;QAC9D,IAAI,CAAC,SAAS,GAAG,IAAI,eAAe,CAAC,OAAO,CAAC,iBAAiB,CAAC;;AAG1D,IAAA,KAAK,CAAC,KAAa,EAAA;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;;AAGxC,QAAA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;QAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;AAE7B,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;YAChC,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;AACrD,YAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;AAC3B,gBAAA,MAAM,IAAI,KAAK,CACb,CAAA,uBAAA,EAA0B,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAA,CAAE,CACpE;;;AAIL,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC5B,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;;AAGpC,QAAA,OAAO,GAAG;;;AAIL,IAAA,QAAQ,CAAC,GAAc,EAAA;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;;AAG9B,IAAA,QAAQ,CAAC,GAAc,EAAA;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;;AAG9B,IAAA,QAAQ,CAAC,GAAc,EAAA;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;;AAEtC;;;;;;;;;;;;;;;"}