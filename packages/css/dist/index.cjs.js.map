{"version":3,"file":"index.cjs.js","sources":["../src/ast/index.ts","../src/generator/index.ts","../src/optimizer/index.ts","../src/tokenizer/index.ts","../src/validator/index.ts"],"sourcesContent":["\r\nimport { Token } from \"../tokenizer\";\r\n\r\nexport type ASTNode = {\r\n  type: string; // e.g., 'stylesheet', 'rule', 'selector', 'declaration', 'value'\r\n  value?: string; // Optional value for the node, e.g., a selector name or property value\r\n  children: ASTNode[]; // Child nodes for nested structures\r\n};\r\n\r\n// Example usage:\r\n// import { Tokenizer } from \"../tokenizer\";\r\n\r\n// const cssInput = `/* Example CSS */\r\n// body {\r\n//   background: white;\r\n//   color: black;\r\n// }`;\r\n// const tokenizer = new Tokenizer(cssInput);\r\n// const tokens = tokenizer.tokenize();\r\n// const astBuilder = new ASTBuilder(tokens);\r\n// console.log(JSON.stringify(astBuilder.buildAST(), null, 2));\r\n\r\nexport class ASTBuilder {\r\n  private tokens: Token[];\r\n  private position: number;\r\n\r\n  constructor(tokens: Token[]) {\r\n    this.tokens = tokens;\r\n    this.position = 0;\r\n  }\r\n\r\n  private currentToken(): Token | null {\r\n    return this.position < this.tokens.length ? this.tokens[this.position] : null;\r\n  }\r\n\r\n  private consumeToken(): Token {\r\n    const token = this.currentToken();\r\n    if (token) this.position++;\r\n    return token!;\r\n  }\r\n\r\n  private parseStylesheet(): ASTNode {\r\n    const stylesheet: ASTNode = { type: 'stylesheet', children: [] };\r\n\r\n    while (this.currentToken()) {\r\n      const rule = this.parseRule();\r\n      if (rule) {\r\n        stylesheet.children.push(rule);\r\n      }\r\n    }\r\n\r\n    return stylesheet;\r\n  }\r\n\r\n  private parseRule(): ASTNode | null {\r\n    const selector = this.parseSelector();\r\n    if (!selector) return null;\r\n\r\n    const rule: ASTNode = { type: 'rule', children: [selector] };\r\n\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other' && token.value === '{') {\r\n      this.consumeToken(); // Consume '{'\r\n      const declarations = this.parseDeclarations();\r\n      rule.children.push(...declarations);\r\n\r\n      const closingBrace = this.currentToken();\r\n      if (closingBrace?.type === 'other' && closingBrace.value === '}') {\r\n        this.consumeToken(); // Consume '}'\r\n      } else {\r\n        throw new Error(`Unexpected token: expected '}' but found ${closingBrace?.value}`);\r\n      }\r\n    }\r\n\r\n    return rule;\r\n  }\r\n\r\n  private parseSelector(): ASTNode | null {\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other') {\r\n      this.consumeToken();\r\n      return { type: 'selector', value: token.value, children: [] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseDeclarations(): ASTNode[] {\r\n    const declarations: ASTNode[] = [];\r\n\r\n    while (this.currentToken() && this.currentToken()?.value !== '}') {\r\n      const declaration = this.parseDeclaration();\r\n      if (declaration) {\r\n        declarations.push(declaration);\r\n      }\r\n    }\r\n\r\n    return declarations;\r\n  }\r\n\r\n  private parseDeclaration(): ASTNode | null {\r\n    const property = this.parseProperty();\r\n    if (!property) return null;\r\n\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other' && token.value === ':') {\r\n      this.consumeToken(); // Consume ':'\r\n      const value = this.parseValue();\r\n\r\n      if (value) {\r\n        const declaration: ASTNode = { type: 'declaration', children: [property, value] };\r\n\r\n        const semicolon = this.currentToken();\r\n        if (semicolon?.type === 'other' && semicolon.value === ';') {\r\n          this.consumeToken(); // Consume ';'\r\n        }\r\n\r\n        return declaration;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private parseProperty(): ASTNode | null {\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other') {\r\n      this.consumeToken();\r\n      return { type: 'property', value: token.value, children: [] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseValue(): ASTNode | null {\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other') {\r\n      this.consumeToken();\r\n      return { type: 'value', value: token.value, children: [] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public buildAST(): ASTNode {\r\n    return this.parseStylesheet();\r\n  }\r\n}\r\n\r\n// ","// dom-css/packages/dom-css/src/generator/index.ts\r\n\r\nimport { ASTNode } from \"../ast\";\r\n\r\n/**\r\n * import { Tokenizer } from \"../tokenizer\";\r\nimport { ASTBuilder } from \"../ast\";\r\nimport { Optimizer } from \"../optimizer\";\r\n\r\nconst cssInput = `/* Example CSS \\*\\/\r\nbody {\r\n    background: white;\r\n    color: black;\r\n    color: black;\r\n  }\r\n  \r\n  const tokenizer = new Tokenizer(cssInput);\r\n  const tokens = tokenizer.tokenize();\r\n  const astBuilder = new ASTBuilder(tokens);\r\n  let ast = astBuilder.buildAST();\r\n  \r\n  const optimizer = new Optimizer(ast);\r\n  ast = optimizer.optimize();\r\n  \r\n  const generator = new CodeGenerator(ast);\r\n  const cssOutput = generator.generate();\r\n  \r\n  console.log(cssOutput);\r\n  **/\r\n \r\nexport class CodeGenerator {\r\n  private ast: ASTNode;\r\n\r\n  constructor(ast: ASTNode) {\r\n    this.ast = ast;\r\n  }\r\n\r\n  private generateStylesheet(node: ASTNode): string {\r\n    return node.children.map((child) => this.generateRule(child)).join(\"\\n\");\r\n  }\r\n\r\n  private generateRule(node: ASTNode): string {\r\n    const selector = node.children.find((child) => child.type === 'selector');\r\n    const declarations = node.children.filter((child) => child.type === 'declaration');\r\n\r\n    if (!selector) {\r\n      throw new Error(\"Rule missing a selector.\");\r\n    }\r\n\r\n    const selectorText = this.generateSelector(selector);\r\n    const declarationsText = declarations.map((declaration) => this.generateDeclaration(declaration)).join(\"\\n  \");\r\n\r\n    return `${selectorText} {\r\n  ${declarationsText}\r\n}`;\r\n  }\r\n\r\n  private generateSelector(node: ASTNode): string {\r\n    return node.value || \"\";\r\n  }\r\n\r\n  private generateDeclaration(node: ASTNode): string {\r\n    const property = node.children.find((child) => child.type === 'property');\r\n    const value = node.children.find((child) => child.type === 'value');\r\n\r\n    if (!property || !value) {\r\n      throw new Error(\"Declaration missing a property or value.\");\r\n    }\r\n\r\n    return `${property.value}: ${value.value};`;\r\n  }\r\n\r\n  public generate(): string {\r\n    if (this.ast.type !== 'stylesheet') {\r\n      throw new Error(\"AST root node must be of type 'stylesheet'.\");\r\n    }\r\n\r\n    return this.generateStylesheet(this.ast);\r\n  }\r\n}\r\n\r\n// Example usage:\r\n","\r\nimport { ASTNode } from \"../ast\";\r\n\r\nexport class Optimizer {\r\n  private ast: ASTNode;\r\n\r\n  constructor(ast: ASTNode) {\r\n    this.ast = ast;\r\n  }\r\n\r\n  private removeDuplicateDeclarations(node: ASTNode): void {\r\n    if (node.type === 'rule') {\r\n      const declarations = node.children.filter((child) => child.type === 'declaration');\r\n      const uniqueDeclarations: Record<string, ASTNode> = {};\r\n\r\n      for (const declaration of declarations) {\r\n        const propertyNode = declaration.children.find((child) => child.type === 'property');\r\n        if (propertyNode && propertyNode.value) {\r\n          uniqueDeclarations[propertyNode.value] = declaration;\r\n        }\r\n      }\r\n\r\n      node.children = node.children.filter((child) => child.type !== 'declaration').concat(Object.values(uniqueDeclarations));\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      this.removeDuplicateDeclarations(child);\r\n    }\r\n  }\r\n\r\n  private mergeAdjacentRules(node: ASTNode): void {\r\n    if (node.type === 'stylesheet') {\r\n      const ruleMap: Record<string, ASTNode> = {};\r\n\r\n      node.children = node.children.filter((child) => {\r\n        if (child.type === 'rule') {\r\n          const selector = child.children.find((c) => c.type === 'selector');\r\n          if (selector && selector.value) {\r\n            if (ruleMap[selector.value]) {\r\n              ruleMap[selector.value].children.push(\r\n                ...child.children.filter((c) => c.type === 'declaration')\r\n              );\r\n              return false;\r\n            } else {\r\n              ruleMap[selector.value] = child;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      this.mergeAdjacentRules(child);\r\n    }\r\n  }\r\n\r\n  public optimize(): ASTNode {\r\n    this.removeDuplicateDeclarations(this.ast);\r\n    this.mergeAdjacentRules(this.ast);\r\n    return this.ast;\r\n  }\r\n}\r\n","\r\nexport type Token = {\r\n    type: string; // e.g., 'selector', 'property', 'value', 'whitespace', 'comment'\r\n    value: string; // The actual content of the token\r\n    position: { line: number; column: number }; // For error reporting and debugging\r\n  };\r\n  \r\n   // Example usage:\r\n//   const cssInput = `/* Example CSS */\r\n//   body {\r\n//     background: white;\r\n//   }`;\r\n//   const tokenizer = new Tokenizer(cssInput);\r\n//   console.log(tokenizer.tokenize());\r\n  \r\n  export class Tokenizer {\r\n    private input: string;\r\n    private position: number;\r\n    private line: number;\r\n    private column: number;\r\n  \r\n    constructor(input: string) {\r\n      this.input = input;\r\n      this.position = 0;\r\n      this.line = 1;\r\n      this.column = 1;\r\n    }\r\n  \r\n    private isWhitespace(char: string): boolean {\r\n      return char === ' ' || char === '\\t' || char === '\\n' || char === '\\r';\r\n    }\r\n  \r\n    private isCommentStart(): boolean {\r\n      return this.input[this.position] === '/' && this.input[this.position + 1] === '*';\r\n    }\r\n  \r\n    private consumeWhitespace(): Token {\r\n      const start = this.position;\r\n      while (this.isWhitespace(this.input[this.position])) {\r\n        if (this.input[this.position] === '\\n') {\r\n          this.line++;\r\n          this.column = 1;\r\n        } else {\r\n          this.column++;\r\n        }\r\n        this.position++;\r\n      }\r\n      return {\r\n        type: 'whitespace',\r\n        value: this.input.slice(start, this.position),\r\n        position: { line: this.line, column: this.column },\r\n      };\r\n    }\r\n  \r\n    private consumeComment(): Token {\r\n      const start = this.position;\r\n      this.position += 2; // Skip '/*'\r\n      while (this.position < this.input.length && !(this.input[this.position] === '*' && this.input[this.position + 1] === '/')) {\r\n        if (this.input[this.position] === '\\n') {\r\n          this.line++;\r\n          this.column = 1;\r\n        } else {\r\n          this.column++;\r\n        }\r\n        this.position++;\r\n      }\r\n      this.position += 2; // Skip '*/'\r\n      return {\r\n        type: 'comment',\r\n        value: this.input.slice(start, this.position),\r\n        position: { line: this.line, column: this.column },\r\n      };\r\n    }\r\n  \r\n    private consumeOther(): Token {\r\n      const start = this.position;\r\n      while (this.position < this.input.length && !this.isWhitespace(this.input[this.position]) && !this.isCommentStart()) {\r\n        this.position++;\r\n        this.column++;\r\n      }\r\n      return {\r\n        type: 'other',\r\n        value: this.input.slice(start, this.position),\r\n        position: { line: this.line, column: this.column },\r\n      };\r\n    }\r\n  \r\n    public tokenize(): Token[] {\r\n      const tokens: Token[] = [];\r\n  \r\n      while (this.position < this.input.length) {\r\n        const char = this.input[this.position];\r\n  \r\n        if (this.isWhitespace(char)) {\r\n          tokens.push(this.consumeWhitespace());\r\n        } else if (this.isCommentStart()) {\r\n          tokens.push(this.consumeComment());\r\n        } else {\r\n          tokens.push(this.consumeOther());\r\n        }\r\n      }\r\n  \r\n      return tokens;\r\n    }\r\n  }\r\n  \r\n//  ","// Example usage:\r\n// import { Tokenizer } from \"../tokenizer\";\r\n// import { ASTBuilder } from \"../ast\";\r\n\r\n// const cssInput = `/* Example CSS */\r\n// body {\r\n//   background: white;\r\n//   color;\r\n// }`;\r\n// const tokenizer = new Tokenizer(cssInput);\r\n// const tokens = tokenizer.tokenize();\r\n// const astBuilder = new ASTBuilder(tokens);\r\n// const ast = astBuilder.buildAST();\r\n\r\n// const validator = new Validator(ast);\r\n// const errors = validator.validate();\r\n// if (errors.length > 0) {\r\n//   console.error(\"Validation errors:\", errors);\r\n// } else {\r\n//   console.log(\"CSS is valid.\");\r\n// }\r\n\r\nimport { ASTNode } from \"../ast\";\r\n\r\nexport class Validator {\r\n  private ast: ASTNode;\r\n  private errors: string[];\r\n\r\n  constructor(ast: ASTNode) {\r\n    this.ast = ast;\r\n    this.errors = [];\r\n  }\r\n\r\n  private validateStylesheet(node: ASTNode): void {\r\n    if (node.type !== 'stylesheet') {\r\n      this.errors.push(`Invalid root node type: ${node.type}`);\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      if (child.type === 'rule') {\r\n        this.validateRule(child);\r\n      } else {\r\n        this.errors.push(`Invalid child node type in stylesheet: ${child.type}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateRule(node: ASTNode): void {\r\n    const selector = node.children.find((child) => child.type === 'selector');\r\n    if (!selector || !selector.value) {\r\n      this.errors.push(`Missing or invalid selector in rule.`);\r\n    }\r\n\r\n    const declarations = node.children.filter((child) => child.type === 'declaration');\r\n    for (const declaration of declarations) {\r\n      this.validateDeclaration(declaration);\r\n    }\r\n  }\r\n\r\n  private validateDeclaration(node: ASTNode): void {\r\n    const property = node.children.find((child) => child.type === 'property');\r\n    const value = node.children.find((child) => child.type === 'value');\r\n\r\n    if (!property || !property.value) {\r\n      this.errors.push(`Missing or invalid property in declaration.`);\r\n    }\r\n\r\n    if (!value || !value.value) {\r\n      this.errors.push(`Missing or invalid value in declaration.`);\r\n    }\r\n  }\r\n\r\n  public validate(): string[] {\r\n    this.validateStylesheet(this.ast);\r\n    return this.errors;\r\n  }\r\n}\r\n\r\n"],"names":["tokens","position","constructor","this","currentToken","length","consumeToken","token","parseStylesheet","stylesheet","type","children","rule","parseRule","push","selector","parseSelector","value","declarations","parseDeclarations","closingBrace","Error","declaration","parseDeclaration","property","parseProperty","parseValue","semicolon","buildAST","ast","generateStylesheet","node","map","child","generateRule","join","find","filter","generateSelector","generateDeclaration","generate","removeDuplicateDeclarations","uniqueDeclarations","propertyNode","concat","Object","values","mergeAdjacentRules","ruleMap","c","optimize","input","line","column","isWhitespace","char","isCommentStart","consumeWhitespace","start","slice","consumeComment","consumeOther","tokenize","errors","validateStylesheet","validateRule","validateDeclaration","validate"],"mappings":"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"}