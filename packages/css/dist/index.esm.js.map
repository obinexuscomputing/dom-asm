{"version":3,"file":"index.esm.js","sources":["../src/ast/index.ts","../src/optimizer/index.ts","../src/tokenizer/index.ts","../src/validator/index.ts","../src/generator/index.ts"],"sourcesContent":["\r\nimport { Token } from \"../tokenizer\";\r\n\r\nexport type ASTNode = {\r\n  type: string; // e.g., 'stylesheet', 'rule', 'selector', 'declaration', 'value'\r\n  value?: string; // Optional value for the node, e.g., a selector name or property value\r\n  children: ASTNode[]; // Child nodes for nested structures\r\n};\r\n\r\n// Example usage:\r\n// import { Tokenizer } from \"../tokenizer\";\r\n\r\n// const cssInput = `/* Example CSS */\r\n// body {\r\n//   background: white;\r\n//   color: black;\r\n// }`;\r\n// const tokenizer = new Tokenizer(cssInput);\r\n// const tokens = tokenizer.tokenize();\r\n// const astBuilder = new ASTBuilder(tokens);\r\n// console.log(JSON.stringify(astBuilder.buildAST(), null, 2));\r\n\r\nexport class ASTBuilder {\r\n  private tokens: Token[];\r\n  private position: number;\r\n\r\n  constructor(tokens: Token[]) {\r\n    this.tokens = tokens;\r\n    this.position = 0;\r\n  }\r\n\r\n  private currentToken(): Token | null {\r\n    return this.position < this.tokens.length ? this.tokens[this.position] : null;\r\n  }\r\n\r\n  private consumeToken(): Token {\r\n    const token = this.currentToken();\r\n    if (token) this.position++;\r\n    return token!;\r\n  }\r\n\r\n  private parseStylesheet(): ASTNode {\r\n    const stylesheet: ASTNode = { type: 'stylesheet', children: [] };\r\n\r\n    while (this.currentToken()) {\r\n      const rule = this.parseRule();\r\n      if (rule) {\r\n        stylesheet.children.push(rule);\r\n      }\r\n    }\r\n\r\n    return stylesheet;\r\n  }\r\n\r\n  private parseRule(): ASTNode | null {\r\n    const selector = this.parseSelector();\r\n    if (!selector) return null;\r\n\r\n    const rule: ASTNode = { type: 'rule', children: [selector] };\r\n\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other' && token.value === '{') {\r\n      this.consumeToken(); // Consume '{'\r\n      const declarations = this.parseDeclarations();\r\n      rule.children.push(...declarations);\r\n\r\n      const closingBrace = this.currentToken();\r\n      if (closingBrace?.type === 'other' && closingBrace.value === '}') {\r\n        this.consumeToken(); // Consume '}'\r\n      } else {\r\n        throw new Error(`Unexpected token: expected '}' but found ${closingBrace?.value}`);\r\n      }\r\n    }\r\n\r\n    return rule;\r\n  }\r\n\r\n  private parseSelector(): ASTNode | null {\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other') {\r\n      this.consumeToken();\r\n      return { type: 'selector', value: token.value, children: [] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseDeclarations(): ASTNode[] {\r\n    const declarations: ASTNode[] = [];\r\n\r\n    while (this.currentToken() && this.currentToken()?.value !== '}') {\r\n      const declaration = this.parseDeclaration();\r\n      if (declaration) {\r\n        declarations.push(declaration);\r\n      }\r\n    }\r\n\r\n    return declarations;\r\n  }\r\n\r\n  private parseDeclaration(): ASTNode | null {\r\n    const property = this.parseProperty();\r\n    if (!property) return null;\r\n\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other' && token.value === ':') {\r\n      this.consumeToken(); // Consume ':'\r\n      const value = this.parseValue();\r\n\r\n      if (value) {\r\n        const declaration: ASTNode = { type: 'declaration', children: [property, value] };\r\n\r\n        const semicolon = this.currentToken();\r\n        if (semicolon?.type === 'other' && semicolon.value === ';') {\r\n          this.consumeToken(); // Consume ';'\r\n        }\r\n\r\n        return declaration;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private parseProperty(): ASTNode | null {\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other') {\r\n      this.consumeToken();\r\n      return { type: 'property', value: token.value, children: [] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseValue(): ASTNode | null {\r\n    const token = this.currentToken();\r\n    if (token?.type === 'other') {\r\n      this.consumeToken();\r\n      return { type: 'value', value: token.value, children: [] };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public buildAST(): ASTNode {\r\n    return this.parseStylesheet();\r\n  }\r\n}\r\n\r\n// ","\r\nimport { ASTNode } from \"../ast\";\r\n\r\nexport class Optimizer {\r\n  private ast: ASTNode;\r\n\r\n  constructor(ast: ASTNode) {\r\n    this.ast = ast;\r\n  }\r\n\r\n  private removeDuplicateDeclarations(node: ASTNode): void {\r\n    if (node.type === 'rule') {\r\n      const declarations = node.children.filter((child) => child.type === 'declaration');\r\n      const uniqueDeclarations: Record<string, ASTNode> = {};\r\n\r\n      for (const declaration of declarations) {\r\n        const propertyNode = declaration.children.find((child) => child.type === 'property');\r\n        if (propertyNode && propertyNode.value) {\r\n          uniqueDeclarations[propertyNode.value] = declaration;\r\n        }\r\n      }\r\n\r\n      node.children = node.children.filter((child) => child.type !== 'declaration').concat(Object.values(uniqueDeclarations));\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      this.removeDuplicateDeclarations(child);\r\n    }\r\n  }\r\n\r\n  private mergeAdjacentRules(node: ASTNode): void {\r\n    if (node.type === 'stylesheet') {\r\n      const ruleMap: Record<string, ASTNode> = {};\r\n\r\n      node.children = node.children.filter((child) => {\r\n        if (child.type === 'rule') {\r\n          const selector = child.children.find((c) => c.type === 'selector');\r\n          if (selector && selector.value) {\r\n            if (ruleMap[selector.value]) {\r\n              ruleMap[selector.value].children.push(\r\n                ...child.children.filter((c) => c.type === 'declaration')\r\n              );\r\n              return false;\r\n            } else {\r\n              ruleMap[selector.value] = child;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      this.mergeAdjacentRules(child);\r\n    }\r\n  }\r\n\r\n  public optimize(): ASTNode {\r\n    this.removeDuplicateDeclarations(this.ast);\r\n    this.mergeAdjacentRules(this.ast);\r\n    return this.ast;\r\n  }\r\n}\r\n","\r\nexport type Token = {\r\n    type: string; // e.g., 'selector', 'property', 'value', 'whitespace', 'comment'\r\n    value: string; // The actual content of the token\r\n    position: { line: number; column: number }; // For error reporting and debugging\r\n  };\r\n  \r\n   // Example usage:\r\n//   const cssInput = `/* Example CSS */\r\n//   body {\r\n//     background: white;\r\n//   }`;\r\n//   const tokenizer = new Tokenizer(cssInput);\r\n//   console.log(tokenizer.tokenize());\r\n  \r\n  export class Tokenizer {\r\n    private input: string;\r\n    private position: number;\r\n    private line: number;\r\n    private column: number;\r\n  \r\n    constructor(input: string) {\r\n      this.input = input;\r\n      this.position = 0;\r\n      this.line = 1;\r\n      this.column = 1;\r\n    }\r\n  \r\n    private isWhitespace(char: string): boolean {\r\n      return char === ' ' || char === '\\t' || char === '\\n' || char === '\\r';\r\n    }\r\n  \r\n    private isCommentStart(): boolean {\r\n      return this.input[this.position] === '/' && this.input[this.position + 1] === '*';\r\n    }\r\n  \r\n    private consumeWhitespace(): Token {\r\n      const start = this.position;\r\n      while (this.isWhitespace(this.input[this.position])) {\r\n        if (this.input[this.position] === '\\n') {\r\n          this.line++;\r\n          this.column = 1;\r\n        } else {\r\n          this.column++;\r\n        }\r\n        this.position++;\r\n      }\r\n      return {\r\n        type: 'whitespace',\r\n        value: this.input.slice(start, this.position),\r\n        position: { line: this.line, column: this.column },\r\n      };\r\n    }\r\n  \r\n    private consumeComment(): Token {\r\n      const start = this.position;\r\n      this.position += 2; // Skip '/*'\r\n      while (this.position < this.input.length && !(this.input[this.position] === '*' && this.input[this.position + 1] === '/')) {\r\n        if (this.input[this.position] === '\\n') {\r\n          this.line++;\r\n          this.column = 1;\r\n        } else {\r\n          this.column++;\r\n        }\r\n        this.position++;\r\n      }\r\n      this.position += 2; // Skip '*/'\r\n      return {\r\n        type: 'comment',\r\n        value: this.input.slice(start, this.position),\r\n        position: { line: this.line, column: this.column },\r\n      };\r\n    }\r\n  \r\n    private consumeOther(): Token {\r\n      const start = this.position;\r\n      while (this.position < this.input.length && !this.isWhitespace(this.input[this.position]) && !this.isCommentStart()) {\r\n        this.position++;\r\n        this.column++;\r\n      }\r\n      return {\r\n        type: 'other',\r\n        value: this.input.slice(start, this.position),\r\n        position: { line: this.line, column: this.column },\r\n      };\r\n    }\r\n  \r\n    public tokenize(): Token[] {\r\n      const tokens: Token[] = [];\r\n  \r\n      while (this.position < this.input.length) {\r\n        const char = this.input[this.position];\r\n  \r\n        if (this.isWhitespace(char)) {\r\n          tokens.push(this.consumeWhitespace());\r\n        } else if (this.isCommentStart()) {\r\n          tokens.push(this.consumeComment());\r\n        } else {\r\n          tokens.push(this.consumeOther());\r\n        }\r\n      }\r\n  \r\n      return tokens;\r\n    }\r\n  }\r\n  \r\n//  ","// Example usage:\r\n// import { Tokenizer } from \"../tokenizer\";\r\n// import { ASTBuilder } from \"../ast\";\r\n\r\n// const cssInput = `/* Example CSS */\r\n// body {\r\n//   background: white;\r\n//   color;\r\n// }`;\r\n// const tokenizer = new Tokenizer(cssInput);\r\n// const tokens = tokenizer.tokenize();\r\n// const astBuilder = new ASTBuilder(tokens);\r\n// const ast = astBuilder.buildAST();\r\n\r\n// const validator = new Validator(ast);\r\n// const errors = validator.validate();\r\n// if (errors.length > 0) {\r\n//   console.error(\"Validation errors:\", errors);\r\n// } else {\r\n//   console.log(\"CSS is valid.\");\r\n// }\r\n\r\nimport { ASTNode } from \"../ast\";\r\n\r\nexport class Validator {\r\n  private ast: ASTNode;\r\n  private errors: string[];\r\n\r\n  constructor(ast: ASTNode) {\r\n    this.ast = ast;\r\n    this.errors = [];\r\n  }\r\n\r\n  private validateStylesheet(node: ASTNode): void {\r\n    if (node.type !== 'stylesheet') {\r\n      this.errors.push(`Invalid root node type: ${node.type}`);\r\n    }\r\n\r\n    for (const child of node.children) {\r\n      if (child.type === 'rule') {\r\n        this.validateRule(child);\r\n      } else {\r\n        this.errors.push(`Invalid child node type in stylesheet: ${child.type}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateRule(node: ASTNode): void {\r\n    const selector = node.children.find((child) => child.type === 'selector');\r\n    if (!selector || !selector.value) {\r\n      this.errors.push(`Missing or invalid selector in rule.`);\r\n    }\r\n\r\n    const declarations = node.children.filter((child) => child.type === 'declaration');\r\n    for (const declaration of declarations) {\r\n      this.validateDeclaration(declaration);\r\n    }\r\n  }\r\n\r\n  private validateDeclaration(node: ASTNode): void {\r\n    const property = node.children.find((child) => child.type === 'property');\r\n    const value = node.children.find((child) => child.type === 'value');\r\n\r\n    if (!property || !property.value) {\r\n      this.errors.push(`Missing or invalid property in declaration.`);\r\n    }\r\n\r\n    if (!value || !value.value) {\r\n      this.errors.push(`Missing or invalid value in declaration.`);\r\n    }\r\n  }\r\n\r\n  public validate(): string[] {\r\n    this.validateStylesheet(this.ast);\r\n    return this.errors;\r\n  }\r\n}\r\n\r\n","// dom-css/packages/dom-css/src/generator/index.ts\r\n\r\nimport { ASTNode } from \"../ast\";\r\n\r\n/**\r\n * import { Tokenizer } from \"../tokenizer\";\r\nimport { ASTBuilder } from \"../ast\";\r\nimport { Optimizer } from \"../optimizer\";\r\n\r\nconst cssInput = `/* Example CSS \\*\\/\r\nbody {\r\n    background: white;\r\n    color: black;\r\n    color: black;\r\n  }\r\n  \r\n  const tokenizer = new Tokenizer(cssInput);\r\n  const tokens = tokenizer.tokenize();\r\n  const astBuilder = new ASTBuilder(tokens);\r\n  let ast = astBuilder.buildAST();\r\n  \r\n  const optimizer = new Optimizer(ast);\r\n  ast = optimizer.optimize();\r\n  \r\n  const generator = new CodeGenerator(ast);\r\n  const cssOutput = generator.generate();\r\n  \r\n  console.log(cssOutput);\r\n  **/\r\n \r\nexport class CodeGenerator {\r\n  private ast: ASTNode;\r\n\r\n  constructor(ast: ASTNode) {\r\n    this.ast = ast;\r\n  }\r\n\r\n  private generateStylesheet(node: ASTNode): string {\r\n    return node.children.map((child) => this.generateRule(child)).join(\"\\n\");\r\n  }\r\n\r\n  private generateRule(node: ASTNode): string {\r\n    const selector = node.children.find((child) => child.type === 'selector');\r\n    const declarations = node.children.filter((child) => child.type === 'declaration');\r\n\r\n    if (!selector) {\r\n      throw new Error(\"Rule missing a selector.\");\r\n    }\r\n\r\n    const selectorText = this.generateSelector(selector);\r\n    const declarationsText = declarations.map((declaration) => this.generateDeclaration(declaration)).join(\"\\n  \");\r\n\r\n    return `${selectorText} {\r\n  ${declarationsText}\r\n}`;\r\n  }\r\n\r\n  private generateSelector(node: ASTNode): string {\r\n    return node.value || \"\";\r\n  }\r\n\r\n  private generateDeclaration(node: ASTNode): string {\r\n    const property = node.children.find((child) => child.type === 'property');\r\n    const value = node.children.find((child) => child.type === 'value');\r\n\r\n    if (!property || !value) {\r\n      throw new Error(\"Declaration missing a property or value.\");\r\n    }\r\n\r\n    return `${property.value}: ${value.value};`;\r\n  }\r\n\r\n  public generate(): string {\r\n    if (this.ast.type !== 'stylesheet') {\r\n      throw new Error(\"AST root node must be of type 'stylesheet'.\");\r\n    }\r\n\r\n    return this.generateStylesheet(this.ast);\r\n  }\r\n}\r\n\r\n// Example usage:\r\n"],"names":["ASTBuilder","tokens","position","constructor","this","currentToken","length","consumeToken","token","parseStylesheet","stylesheet","type","children","rule","parseRule","push","selector","parseSelector","value","declarations","parseDeclarations","closingBrace","Error","declaration","parseDeclaration","property","parseProperty","parseValue","semicolon","buildAST","Optimizer","ast","removeDuplicateDeclarations","node","filter","child","uniqueDeclarations","propertyNode","find","concat","Object","values","mergeAdjacentRules","ruleMap","c","optimize","Tokenizer","input","line","column","isWhitespace","char","isCommentStart","consumeWhitespace","start","slice","consumeComment","consumeOther","tokenize","Validator","errors","validateStylesheet","validateRule","validateDeclaration","validate","CodeGenerator","generateStylesheet","map","generateRule","join","generateSelector","generateDeclaration","generate"],"mappings":"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"}