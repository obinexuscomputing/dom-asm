class t{input;position=0;constructor(t){this.input=t}tokenize(){const t=[];for(;this.position<this.input.length;){"<"===this.input[this.position]?"/"===this.input[this.position+1]?t.push(this.readEndTag()):"!"===this.input[this.position+1]?t.push(this.readComment()):t.push(this.readStartTag()):t.push(this.readText())}return t}readStartTag(){this.position++;const t=this.readUntil(/[ \/>]/),e={};for(;">"!==this.input[this.position]&&"/"!==this.input[this.position];){const t=this.readUntil("=").trim();this.position++;const i=this.input[this.position];this.position++;const s=this.readUntil(new RegExp(`${i}`));e[t]=s,this.position++}return"/"===this.input[this.position]&&this.position++,this.position++,{type:"StartTag",name:t,attributes:e}}readEndTag(){this.position+=2;const t=this.readUntil(">");return this.position++,{type:"EndTag",name:t}}readComment(){this.position+=4;const t=this.readUntil("--\x3e");return this.position+=3,{type:"Comment",value:t}}readText(){return{type:"Text",value:this.readUntil("<")}}readUntil(t){const e=this.position;for(;this.position<this.input.length&&!("string"==typeof t?this.input[this.position]===t:t.test(this.input[this.position]));)this.position++;return this.input.slice(e,this.position)}}class e{validate(t){const e=[];return this.traverse(t,e),{valid:0===e.length,errors:e}}traverse(t,e){if("Element"===t.type){t.name?.match(/^[a-zA-Z0-9\-]+$/)||e.push(`Invalid tag name: ${t.name||"undefined"}`);for(const i of t.children||[])this.traverse(i,e)}}}class i{selfClosingTags;constructor(t=["img","input","br","hr","meta","link"]){this.selfClosingTags=t}generateHTML(t){if("Text"===t.type)return t.value||"";if("Comment"===t.type)return`\x3c!-- ${t.value||""} --\x3e`;if("Element"===t.type){const e=this.generateAttributes(t.attributes||{}),i=t.children?.map((t=>this.generateHTML(t))).join("")||"";return this.isSelfClosingTag(t.name)?`<${t.name}${e} />`:`<${t.name}${e}>${i}</${t.name}>`}return""}generateAttributes(t){return Object.entries(t).map((([t,e])=>` ${t}="${e}"`)).join("")}isSelfClosingTag(t){return this.selfClosingTags.includes(t||"")}}class s extends Error{token;position;constructor(t,e,i){super(t),this.name="HTMLParserError",this.token=e,this.position=i,Error.captureStackTrace&&Error.captureStackTrace(this,s)}}class n{tokenizer;constructor(){this.tokenizer=new t("")}parse(e){this.tokenizer=new t(e);const i=this.tokenizer.tokenize();return this.buildAST(i)}buildAST(t){const e={type:"Element",name:"root",attributes:{},children:[]},i=[e];for(const e of t)switch(e.type){case"StartTag":{const t={type:"Element",name:e.name,attributes:e.attributes,children:[]};i[i.length-1].children.push(t),i.push(t);break}case"EndTag":{const n=i.pop();if(!n||n.name!==e.name)throw new s(`Unmatched end tag: </${e.name}>`,e,t.indexOf(e));break}case"Text":{const t={type:"Text",value:e.value};i[i.length-1].children.push(t);break}case"Comment":{const t={type:"Comment",value:e.value};i[i.length-1].children.push(t);break}}if(i.length>1)throw new s("Unclosed tags detected",t[t.length-1],t.length);return e}}export{i as HTMLCodeGenerator,n as HTMLParser,s as HTMLParserError,t as HTMLTokenizer,e as HTMLValidator};
//# sourceMappingURL=index.js.map
